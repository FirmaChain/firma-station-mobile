# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!

# If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.
# because `react-native-flipper` depends on (FlipperKit,...) that will be excluded
#
# To fix this you can also exclude `react-native-flipper` using a `react-native.config.js`
# ```js
# module.exports = {
#   dependencies: {
#     ...(process.env.NO_FLIPPER ? { 'react-native-flipper': { platforms: { ios: null } } } : {}),
# ```
flipper_config = ENV['NO_FLIPPER'] == "1" ? FlipperConfiguration.disabled : FlipperConfiguration.enabled
 
linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'firma_station_mobile' do
  permissions_path = '../node_modules/react-native-permissions/ios'
  pod 'Permission-Camera', :path => "#{permissions_path}/Camera"

  config = use_native_modules!

  # Flags change depending on the env values.
  flags = get_default_flags()
  
  use_react_native!(
    :path => config[:reactNativePath],

    # Hermes is now enabled by default. Disable by setting this flag to false.
    :hermes_enabled => flags[:hermes_enabled],
    :fabric_enabled => false,
    # flags[:fabric_enabled],
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    :flipper_configuration => flipper_config,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )
  
  target 'firma_station_mobileTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )
    __apply_Xcode_12_5_M1_post_install_workaround(installer)
  

  #! Disable fixing error for test
  #   # Fix wrong import
  #   Dir.glob("Pods/**/hash.hpp").each do |file_path|
  #     text = File.read(file_path)
  #     updated_text = text.gsub("std::unary_function", "std::__unary_function")
      
  #     if text != updated_text # Save if changed
  #       File.write(file_path, updated_text)
  #       puts "Modified std::unary_function to std::__unary_function in #{file_path}"
  #     else
  #       puts "No changes needed in #{file_path}"
  #     end
  #   end

  #   # Fix error with Filpper
  #   installer.pods_project.targets.each do |target|
  #     if target.name == 'Flipper'
  #       file_path = 'Pods/Flipper/xplat/Flipper/FlipperTransportTypes.h'
  #       contents = File.read(file_path)
  #       unless contents.include?('#include <functional>')
  #         File.open(file_path, 'w') do |file|
  #           file.puts('#include <functional>')
  #           file.puts(contents)
  #         end
  #       end
  #     end
  #   end

  #   # Fix bitcode issue
  #   installer.pods_project.targets.each do |target|
  #     target.build_configurations.each do |config|
  #       config.build_settings['ENABLE_BITCODE'] = 'NO'
  #     end
  #   end

  #   # Fix bitcode issue #2
  #   bitcode_strip_path = `xcrun --find bitcode_strip`.chop!
  #   def strip_bitcode_from_framework(bitcode_strip_path, framework_relative_path)
  #     framework_path = File.join(Dir.pwd, framework_relative_path)
  #     command = "#{bitcode_strip_path} #{framework_path} -r -o #{framework_path}"
  #     puts "Stripping bitcode: #{command}"
  #     system(command)
  #   end
 
  #   framework_paths = [
  #     "Pods/LogRocket/LogRocket.xcframework/ios-arm64/LogRocket.framework/LogRocket",
  #     "Pods/hermes-engine/destroot/Library/Frameworks/macosx/hermes.framework/hermes",
  #     "Pods/hermes-engine/destroot/Library/Frameworks/macosx/hermes.framework/Versions/Current/hermes",
  #     "Pods/hermes-engine/destroot/Library/Frameworks/universal/hermes.xcframework/ios-arm64/hermes.framework/hermes",
  #     "Pods/hermes-engine/destroot/Library/Frameworks/universal/hermes.xcframework/ios-arm64_x86_64-maccatalyst/hermes.framework/hermes"
  #   ]
 
  #   framework_paths.each do |framework_relative_path|
  #     strip_bitcode_from_framework(bitcode_strip_path, framework_relative_path)
  #   end
  end
end